% Clear workspace and close figures
clc
clear all
close all

% Input variables to be varied
C_rate_list = [1e-4,1e-3,1e-4,0.1, 0.5, 1,2:2:20]; % List of C_rates
initial_temps = [-20:10:15,20,25,30,35,40:10:60]; 

% Load necessary data files
load('V_avgC20.mat'); % Open circuit voltage
load('r_rc_rc_scale_cap_A123_26650.mat'); % Parameters for the electrical model
load('dUdT'); % dU/dT for entropic heat calculation
C_bat = 2.6;  % Battery capacity in Ah

% Constants for the thermal model
Cc = 62.7; % J/K, Lumped Cell Core Heat Capacity
Cs = 4.5; % J/K, Lumped Cell Surface (Casing) Heat Capacity
Rc = 1.94; % K/W, conduction resistance
Ru = 15; % K/W, convection resistance

% Loop over each C_rate
for C_rate = C_rate_list
    % Display progress message
    fprintf('Running simulation for C_rate = %.2f\n', C_rate);

    % Initialize arrays to store data for this C_rate
    all_data = []; % Will store data for all temperatures at this C_rate

    % Loop over each initial temperature
    for initial_temp = initial_temps
        % Set initial conditions
        Ts_0 = initial_temp; % Initial battery surface temperature
        Tc_0 = initial_temp; % Initial battery core temperature
        Tf = initial_temp;   % Ambient temperature
        SOC_0 = 1;           % Initial State of Charge

        % Simulation time; adjust based on C_rate to prevent over-discharge
        t_end = 3600 / C_rate; % Total simulation time in seconds
        t = (0:10/C_rate:t_end)';    % Time vector

        % Current input: positive for discharge, negative for charge
        I = (C_bat * C_rate) * ones(length(t), 1);

        % Prepare simulation input
        ut = [t I];

        % Run the simulation
        options = [];
        [ts, xs, y] = sim('Battery_Electrothermal_Model.mdl', t, options, ut);

        % Extract outputs
        Tc = y(:, 1); % Battery core temperature
        Ts = y(:, 2); % Battery surface temperature
        SOC = y(:, 3); % State of Charge
        V_T = y(:, 4); % Battery voltage

        Mean_Temp = (Ts + Tc) / 2;
        Capacity = C_bat * (1 - SOC);
        Voltage = V_T;

        % Create a table for this temperature
        temp_column = initial_temp * ones(length(t), 1);
        data_table = table(temp_column, Capacity, Voltage, Mean_Temp, ...
                           'VariableNames', {'Initial_Temperature', 'Capacity', 'Voltage', 'Mean_Temperature'});

        % Append to all_data
        all_data = [all_data; data_table];
    end

    % Write data to CSV file named after the C_rate
    filename = sprintf('Battery_Simulation_C_rate_%.2f.csv', C_rate);
    writetable(all_data, filename);

    % Display progress
    fprintf('Data for C_rate = %.2f written to file "%s"\n', C_rate, filename);
end

% Inform the user that the process is complete
disp('All simulations completed and data written to CSV files.');
